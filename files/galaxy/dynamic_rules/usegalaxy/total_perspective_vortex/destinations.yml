---
# ALL tags must be with dashes (-) instead of underscores (_)
destinations:
  # Trigger CI
  interactive_pulsar:
    runner: pulsar_embedded
    destination_name_override: "embedded_pulsar_interactive_c{cores}-m{mem}"
    max_accepted_cores: 24
    max_accepted_mem: 128
    max_accepted_gpus: 0
    params:
      tmp_dir: true
      docker_enabled: true
      docker_sudo: false
      docker_net: bridge
      docker_auto_rm: true
      docker_set_user: ""
      require_container: true
      # submit_request_cpus its called in pulsar and in plain condor only request_cpus
      submit_request_cpus: "{cores}"
      submit_request_memory: "{mem}G"
      outputs_to_working_directory: false
      container_monitor_result: callback
      submit_requirements: 'GalaxyDockerHack == True'
    scheduling:
      prefer:
        - docker
        - interactive

  interactive_pulsar_gpu:
    inherits: interactive_pulsar
    destination_name_override: "e-pulsar_i_c{cores}-m{mem}-g{gpus}"
    max_accepted_gpus: 1

    env:
      #GALAXY_MEMORY_MB: '{MEMORY_MB}'
      #GALAXY_SLOTS: '{PARALLELISATION}'
      GPU_AVAILABLE: '1'
    params:
      requirements: 'GalaxyGroup == "compute_gpu"'
      tmp_dir: true
      metadata_strategy: 'extended'
    scheduling:
      prefer:
        - docker
        - interactive

  embedded_pulsar_docker:
    runner: pulsar_embedded
    destination_name_override: "embedded_pulsar_docker_c{cores}-m{mem}"
    params:
      tmp_dir: true
      docker_enabled: true
      #docker_volumes: $defaults
      docker_sudo: false
      docker_net: bridge
      docker_auto_rm: true
      docker_set_user: ""
      require_container: true
      submit_request_cpus: "{cores}"
      submit_request_memory: "{mem}"
      outputs_to_working_directory: false
      container_monitor_result: callback
      submit_requirements: 'GalaxyDockerHack == True'
    scheduling:
      prefer:
        - docker
        - embedded-pulsar

  condor_singularity:
    runner: condor
    max_accepted_cores: 24
    max_accepted_mem: 128
    params:
      singularity_enabled: true
      singularity_volumes: "$_CONDOR_SCRATCH_DIR:rw,$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro,/data/dnb03/galaxy_db/:ro,/data/dnb05/galaxy_db/:ro,/data/dnb06/galaxy_db/:rw,/data/dnb07/galaxy_db/:rw,/data/dnb08/galaxy_db/:rw,/data/dp01/galaxy_db/:rw,/data/0/galaxy_db/:ro,/data/1/galaxy_db/:ro,/data/2/galaxy_db/:ro,/data/3/galaxy_db/:ro,/data/4/galaxy_db/:ro,/data/5/galaxy_import/galaxy_user_data/:ro,/data/6/galaxy_db/:ro,/data/7/galaxy_db/:ro,/usr/local/tools/:ro"
      singularity_default_container_id: "/cvmfs/singularity.galaxyproject.org/all/centos:8.3.2011"
      tmp_dir: true
      requirements: 'GalaxyGroup == "compute"'
      metadata_strategy: "extended"
    scheduling:
      prefer:
        - singularity

  condor_tpv:
    runner: condor
    max_accepted_cores: 64
    max_accepted_mem: 1000
    scheduling:
      accept:
        - condor-tpv
    params:
      tmp_dir: true

  condor_extended:
    inherits: condor-tpv
    params:
      metadata_strategy: 'extended'
    scheduling:
      require:
        - extended-metadata

  pulsar_default: # use for remote Pulsar nodes and ALWAYS overwrite the runner.
    runner: pulsar_embedded
    destination_name_override: "embedded_pulsar_c{cores}-m{mem}"
    env:
      LC_ALL: C
      SINGULARITY_CACHEDIR: /data/share/var/database/container_cache # On the NFS share on remote Pulsar side
    params:
      jobs_directory: /data/share/staging
      transport: curl
      remote_metadata: "false"
      metadata_strategy: directory
      default_file_action: remote_transfer
      rewrite_parameters: "true"
      persistence_directory: /data/share/persisted_data
      outputs_to_working_directory: "false"
      dependency_resolution: "none"
      submit_request_cpus: "{cores}"
      submit_request_memory: "{mem}"
      singularity_enabled: true
      singularity_default_container_id: "/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:20.04"
      singularity_volumes: "$default,$job_directory:rw,$tool_directory:ro,/cvmfs/data.galaxyproject.org:ro"
      docker_volumes: "$default,$job_directory:rw,$tool_directory:ro,/cvmfs/data.galaxyproject.org:ro"
    scheduling:
      require:
        - pulsar


  pulsar_mira_tpv:
    runner: pulsar_mira_runner
    max_accepted_cores: 8
    max_accepted_mem: 15
    inherits: pulsar_default
    scheduling:
      require:
        - mira-pulsar
      accept:
        - docker
        - condor-singularity-with-conda-python
        - condor-tpv
        - singularity

  pulsar_sanjay_tpv:
    runner: pulsar_sanjay_runner
    max_accepted_cores: 8
    max_accepted_mem: 15
    inherits: pulsar_default
    scheduling:
      require:
        - sanjay-pulsar
      accept:
        - docker
        - condor-singularity-with-conda-python
        - condor-tpv
        - singularity

  pulsar_sk01_tpv:
    runner: pulsar_eu_sk01
    inherits: pulsar_default
    max_accepted_cores: 8
    max_accepted_mem: 16
    scheduling:
      require:
        - sk-pulsar
      accept:
        - docker
        - condor-singularity-with-conda-python
        - condor-tpv
        - singularity

  pulsar_it_tpv:
    runner: pulsar_eu_it01
    inherits: pulsar_default
    max_accepted_cores: 16
    max_accepted_mem: 31


  pulsar_be_tpv:
    runner: pulsar_eu_be01
    inherits: pulsar_default
    max_accepted_cores: 8
    max_accepted_mem: 15

  condor_singularity_with_conda_python:
    runner: condor
    max_accepted_cores: 64
    max_accepted_mem: 1000
    scheduling:
      require:
        - condor-singularity-with-conda-python
    params:
      singularity_enabled: true
      # can and should be made stricter at some point
      singularity_volumes: "$_CONDOR_SCRATCH_DIR:rw,$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro,/data/dnb03/galaxy_db/:ro,/data/dnb05/galaxy_db/:ro,/data/dnb06/galaxy_db/:rw,/data/dnb07/galaxy_db/:rw,/data/dnb08/galaxy_db/:rw,/data/dp01/galaxy_db/:rw,/data/0/galaxy_db/:ro,/data/1/galaxy_db/:ro,/data/2/galaxy_db/:ro,/data/3/galaxy_db/:ro,/data/4/galaxy_db/:ro,/data/5/galaxy_import/galaxy_user_data/:ro,/data/6/galaxy_db/:ro,/data/7/galaxy_db/:ro,/usr/local/tools/:ro"
      container_override:
        - type: singularity
          shell: "/bin/bash"
          resolve_dependencies: true
          identifier: "/data/0/singularity_base_images/centos:8.3.2011"

  # needs to be migrated, since we do not want to run upload jobs on celery
  # will have a dedicated VGCN image with tag
  condor_upload:
    runner: condor
    scheduling:
      require:
        - upload
    max_accepted_cores: 20
    max_accepted_mem: 10
    #env:
    #  GALAXY_MEMORY_MB: '{MEMORY_MB}'
    #  GALAXY_SLOTS: '{PARALLELISATION}'
    params:
      priority: '{PRIORITY}'
      request_cpus: '{cores}'
      request_memory: '{mem}G'
      requirements: 'GalaxyTraining == false'
      rank: 'GalaxyGroup == "upload"'
      tmp_dir: 'True'
      metadata_strategy: 'extended'

  # could be migrated, looks useful, but is not used
  condor_gpu:
    runner: condor
    max_accepted_cores: 8
    max_accepted_mem: 16
    max_accepted_gpus: 1
    env:
      #GALAXY_MEMORY_MB: '{MEMORY_MB}'
      #GALAXY_SLOTS: '{PARALLELISATION}'
      GPU_AVAILABLE: 1
    params:
      requirements: 'GalaxyGroup == "compute_gpu"'
      tmp_dir: true
      metadata_strategy: 'extended'
    scheduling:
      require:
        - condor-gpu
